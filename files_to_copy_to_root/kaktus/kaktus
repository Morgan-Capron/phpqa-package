#!/usr/bin/php
<?php
/**
 * PHP Security Framework Auditing Tool
 * 
 * @framework Kaktus
 * @version 0.1 Beta
 * @author N.Namont
 *
 **/
class kaktus
{
    // Project title
    const PROJECTTITLE      = 'KAKTUS' ;
    // Project description
    const PROJECTDESC       = "PHP security auditing tool.\n Please visit http://kaktus.dizagn.com for more informations" ;
    // script version, date
    const VERSION           = '0.1' ;
    // script version, date
    const DATE              = '2008-08' ;
    
    // LOG OPTIONS
    // VERBOSE MODE
    const ALL               = 1 ;
    const CONSOLE           = 2 ;
    const LOG               = 3 ;
    // Log Level
    const CRITICAL          = 1 ;
    const WARNING           = 2 ;
    const NOTICE             = 3 ;
    
    // COUNT OPTIONS
    const CNT_TOTAL         = 1 ;
    const CNT_AUDIT         = 2 ;
    const CNT_IGNOR         = 3 ;
    const CNT_UNREAD        = 4 ;
    const CNT_LINEAUDIT     = 5 ;
    const CNT_CRITICAL      = 6 ;
    const CNT_WARNING       = 7 ;
    const CNT_NOTICE        = 8 ;
    
    // List of extension to parse
    protected $m_aExt = array('php','php3', 'php4', 'php5', 'inc','phtml') ;
    // List des extensions trouvÃ©s 
    protected $m_aExtList = array() ; 
    // Command line options array
    protected $m_aArgs ;        
    
    
    public function __construct()
    {
        $l_sRulesFile = dirname(__FILE__).DIRECTORY_SEPARATOR.'rules' ;
        if(TRUE == file_exists($l_sRulesFile)){ 
            include_once($l_sRulesFile);
            $this->m_aRules = $l_aRule ;
        }else{
            die("\nRules file not found\n\n") ;
        }
    }

    /***************************************************************************
     * RULEZ AND PARSING RULES
     **/
    
    /**
     * Parse one line of given file, apply rules and log
     *
     * @param int $p_iNum Line number
     * @param string $p_sContent Line content
     **/
    protected function rulez($p_iNum,$p_sContent)
    {
        foreach ($this->m_aRules AS $key => $value){
            
            if (1 == preg_match($value['pattern'],$p_sContent) && $value['level'] <= $this->m_aArgs['l']){
                
                // Add info to the Counter 
                if ($value['level'] == self::CRITICAL){
                    $this->add(self::CNT_CRITICAL) ;
                    $colorStart = "\033[41m";
                    $colorEnd = "\033[0m";
                }
                else if($value['level'] == self::WARNING){
                    $this->add(self::CNT_WARNING) ;
                    $colorStart = "\033[45m";
                    $colorEnd = "\033[0m";
                }
                else if($value['level'] == self::NOTICE){
                    $this->add(self::CNT_NOTICE) ;
                    $colorStart = "\033[42m";
                    $colorEnd = "\033[0m";
                }

                $this->log( "\n".$colorStart."     LINE ".($p_iNum+1)."\t[ ".$this->logLabel($value['level'])." ]\t ".$value['message'].$colorEnd );               

            }
        }        
    }
    
    /**
     * Tokenize each files, and apply token rules
     * @param string $p_sFileName File name to tokenize
     **/
    protected function tokenize($p_sFileName)
    {
        $l_sSource = file_get_contents($p_sFileName);
        $l_aTokens = @token_get_all($l_sSource) ;
        foreach($l_aTokens AS $l_aToken){
            if(TRUE == is_array($l_aToken))
            {
                switch(token_name($l_aToken[0])){
                    case 'T_VARIABLE' :
                        $this->addToList('variable',$l_aToken[1]) ;
                        break;
                    case 'T_CLASS' :
                        break;
                    case 'T_FUNCTION' :
                        break;
                }
            }
        }
    }
    
        
    /***************************************************************************
     * CALL & AUDIT METHOD
     **/
    
    /**
     * Audit one file
     *
     * @param string $p_sFileName File name
     * @param bool $p_bVerbose Verbose analyse when use in file context or less
     * in directory context
     * @return none
     **/
    protected function auditFile($p_sFileName,$p_bVerbose = TRUE)
    {
        // File exists ?
        if (FALSE == file_exists($p_sFileName)){
            $this->log( "\n Auditing file : ".$p_sFileName, self::LOG ) ;    
            $this->log( "\n\033[41m    [ ERROR ] File not found\033[0m", self::LOG );
        }
        // File is readable ?
        else if (FALSE == is_readable($p_sFileName)){
            $this->log( "\n Auditing file : ".$p_sFileName, self::LOG ) ;
            $this->log( "\n\033[41m    [ ERROR ] File is not readable\033[0m", self::LOG );
            $this->add(self::CNT_UNREAD) ;
        }
        // Wrong extension file
        else if($this->getExt($p_sFileName) == FALSE){
            $this->log( "\n Auditing file : ".$p_sFileName, self::LOG ) ;
            $this->log( "\n    [ IGNOR ] Wrong file : " .$p_sFileName, self::LOG );
            $this->add(self::CNT_IGNOR) ;
        }
        // Auditing file
        else{
            $this->log( "\n Auditing file : ".$p_sFileName ) ;
            
            // token audit
            if(TRUE == isset($this->m_aArgs['t'])){
                $this->tokenize($p_sFileName);
            }
            
            // pattern audit
            $l_aContent = file($p_sFileName) ;
            // Content audit line per line
            foreach($l_aContent AS $key => $value){
                $this->rulez($key, $value) ;
                $this->add(self::CNT_LINEAUDIT) ;
            }
            $this->add(self::CNT_AUDIT) ;
        }
        // Add to extension list and total
        $this->addToList('extension',pathinfo(strtolower($p_sFileName), PATHINFO_EXTENSION)) ;
        $this->add(self::CNT_TOTAL) ;
    }
        
    /**
     * Audit one directory
     *
     * @param string $p_sPath directory path to audit
     * @return 
     **/
    protected function auditDir($p_sPath)
    {
        $l_sPath = rtrim( $p_sPath, DIRECTORY_SEPARATOR) ;
        
        if (FALSE == is_dir($l_sPath)){
            $this->log( "\n\033[41m [ ERROR ] Directory not found\033[0m\n" );
        }
        else if (FALSE == is_readable($l_sPath)){
            $this->log( "\n\033[41m [ ERROR ] Directory is not readable\033[0m\n" );
        }
        else{
            $this->log( "\n\n Auditing directory : '".$l_sPath."'\n" );
            $this->recReadDir( $l_sPath );
        }
    }
    
    /**
     * Read and list directory content recursively
     **/
    protected function recReadDir($p_sPath)
    {
        $l_hHd = opendir($p_sPath) ;
     
        // Directory Browsing
        while(FALSE !== ($l_sFile = readdir($l_hHd))){
            // Type and extension exclusion
            if ($l_sFile != '.' &&
                $l_sFile != '..' ){
                $l_sPath = $p_sPath.DIRECTORY_SEPARATOR.$l_sFile ;
                
                if (TRUE == is_dir($l_sPath)){
                    $this->recReadDir($l_sPath) ;
                }
                else{
                    $this->auditFile($l_sPath) ;    
                }
            }
        }
        closedir($l_hHd) ;
    }
    
    /**
     * Check if extension has to be parsed or no
     * @param $p_sFileName
     * @return bool TRUE / FALSE
     **/
    protected function getExt($p_sFileName)
    {
        $ext = pathinfo(strtolower($p_sFileName), PATHINFO_EXTENSION) ;
        return in_array($ext, $this->m_aExt) ;
    }
    
    /**
     * Display the project help
     * @return string Version
     **/
    protected function callHelp()
    {
        $string  = "\n\n Usage : kaktus [options] \n";
        
        $string .= "\n Example 1 : kaktus -o log.txt -l critical -f test.php";
        $string .= "\n Example 2 : kaktus -o log.txt -l notice -d ../my_directory \n";
        
        $string .= "\n -h --help \t\t\t Display this help";
        $string .= "\n -f --file [filename]\t\t Audit one given file";
        $string .= "\n -d --dir [/path/to/directory]\t Audit all files from directory recursively";
        $string .= "\n -t --token\t\t\t Token analysis, more complete but more longer";
        $string .= "\n -o --output [log_filename]\t Log script output into a logfile";
        $string .= "\n -l --log [critical / warning / notice]\t Log level";
        return $string;
    }
    
    /**
     * Display audit counter results
     * 
     **/
    protected function resume()
    {
        if(FALSE == isset($this->m_aCount) || FALSE == is_array($this->m_aCount)){
            exit();
        }
        
        $nbTotal        = $this->m_aCount[self::CNT_TOTAL] ;
        $nbAudit        = (TRUE == isset($this->m_aCount[self::CNT_AUDIT] )) ? $this->m_aCount[self::CNT_AUDIT] : 0 ;
        $nbLineAudit    = (TRUE == isset($this->m_aCount[self::CNT_LINEAUDIT] )) ? $this->m_aCount[self::CNT_LINEAUDIT] : 0 ;
        $nbIgnor        = (TRUE == isset($this->m_aCount[self::CNT_IGNOR] )) ? $this->m_aCount[self::CNT_IGNOR] : 0 ;
        $nbUnread       = (TRUE == isset($this->m_aCount[self::CNT_UNREAD] )) ? $this->m_aCount[self::CNT_UNREAD] : 0 ;
        
        $nbPatCritical  = (TRUE == isset($this->m_aCount[self::CNT_CRITICAL] )) ? $this->m_aCount[self::CNT_CRITICAL] : 0 ;
        $nbPatWarning   = (TRUE == isset($this->m_aCount[self::CNT_WARNING] )) ? $this->m_aCount[self::CNT_WARNING] : 0 ;
        $nbPatNotice    = (TRUE == isset($this->m_aCount[self::CNT_NOTICE] )) ? $this->m_aCount[self::CNT_NOTICE] : 0 ;
        $nbPatTotal     = $nbPatCritical + $nbPatWarning + $nbPatNotice ;
        
        // files 
        $string  = "\n\n  Files results :\n";
        $string .= "\n\t - Total Files scanned \t\t ".$nbTotal;
        $string .= "\n\t - Files audited \t\t ".$nbAudit ." with ".$nbLineAudit." lines readed ";
        $string .= "\n\t - Files ignored \t\t ".$nbIgnor ;
        $string .= "\n\t - Files unreadables \t\t ".$nbUnread ;
        //pattern matching
        $string .= "\n\n  Pattern results by level:\n";
        if($nbPatTotal > 0){
             $string .= "\n\t - Critical alert \t\t ".$nbPatCritical." ( ".$this->getPercent($nbPatCritical,$nbPatTotal)." )" ;
             $string .= "\n\t - Warning alert \t\t ".$nbPatWarning." ( ".$this->getPercent($nbPatWarning,$nbPatTotal)." )" ;
             $string .= "\n\t - Notice alert \t\t ".$nbPatNotice." ( ".$this->getPercent($nbPatNotice,$nbPatTotal)." )" ;
        }
        else{
             $string .="\n\t - No pattern matching" ;
        }
        
        // Extension list
        if(TRUE ==isset($this->m_aList['extension']) && count($this->m_aList['extension'])>1){
            $string .= "\n\n  Files extensions audited:\n";
            arsort($this->m_aList['extension']) ;
            $l_iNbTotal = count($this->m_aList['extension']) ;
            foreach($this->m_aList['extension'] AS $ext => $nb){
                if ($ext == ''){$ext = "without extension";}
                $string .="\n\t ".$nb."\t ".$ext." ( ".$this->getPercent($nb,$nbTotal)." )" ;
            }
        }
        
        // List of classes
        if(TRUE ==isset($this->m_aList['class']) && count($this->m_aList['class'])>0){
            $string .= "\n\n Classes list:\n" ;
            arsort($this->m_aList['class']) ;
            foreach($this->m_aList['class'] AS $var => $nb){
                $string .="\n\t ".$nb."\t ".$var ;
            }
        }
        
        // List of functions
        if(TRUE ==isset($this->m_aList['function']) && count($this->m_aList['function'])>0){
            $string .= "\n\n Functions list:\n" ;
            arsort($this->m_aList['function']) ;
            foreach($this->m_aList['function'] AS $var => $nb){
                $string .="\n\t ".$nb."\t ".$var ;
            }
        }
        
        // List of variables
        if(TRUE ==isset($this->m_aList['variable']) && count($this->m_aList['variable'])>0){
            $string .= "\n\n Variables list:\n" ;
            arsort($this->m_aList['variable']) ;
            foreach($this->m_aList['variable'] AS $var => $nb){
                $string .="\n\t ".$nb."\t ".$var ;
            }
        }
        
        $this->log($string, self::LOG) ;
        
        return $string ;
    }
    /***************************************************************************
     * FRAMEWORK INTERNAL METHOD
     **/
    
    /**
     * getPercent
     * @param int $p_iNb nb to percent
     * @param int $p_iTotal total to percent
     **/
    protected function getPercent($p_iNb, $p_iTotal)
    {
        return round(((int)$p_iNb*100)/(int)$p_iTotal, 1).' %' ;
    }
    
    /**
    * Store keyboard input into string
    * @return string Given string
    */
    protected function _getInput()
    {
        $fp = fopen('php://stdin', 'r');
        $input = strtoupper(fgets($fp, 255));
        fclose($fp);
        $input = trim($input);
        return $input;
    }
    
    /**
     * Kaktus Logger
     * @param string $p_sInfo
     * @param int $p_iVerbose
     **/
    protected function log($p_sInfo, $p_iVerbose = self::ALL)
    {
        // Console displaying
        if ( $p_iVerbose == self::ALL || $p_iVerbose == self::CONSOLE) {
            echo $p_sInfo ;
        }
        
        // File logging
        if ( $p_iVerbose == self::ALL || $p_iVerbose == self::LOG) {
            if (TRUE == isset($this->m_aArgs['o'])){            
                fwrite($this->m_hLogHd, $p_sInfo ) ;
            }
        }
    }
    
    /**
     * Kaktus counter
     * @param int $p_iType add one to specified counter array
     **/
    protected function add($p_iType)
    {
        if (FALSE == isset($this->m_aCount[$p_iType])){
            $this->m_aCount[$p_iType] = 1 ;
        }
        else{
            $this->m_aCount[$p_iType]++ ;    
        }
    }
    
    /**
     * Add 1 to an element of a list of this element, this is a counter
     * @param string $p_sElement Element of the list (Ex: variable, function, class...)
     * @param string $p_sVar Variable name which to add 1
     **/
    protected function addToList($p_sElement, $p_sVar)
    {
        if (FALSE == isset($this->m_aList[$p_sElement][$p_sVar])){
            $this->m_aList[$p_sElement][$p_sVar] = 1 ;
        }
        else{
            $this->m_aList[$p_sElement][$p_sVar]++ ;    
        }
    }
    
    /**
     * Kaktus logger creation
     * 
     **/
    protected function createLogFile($l_sFileName = self::LOGFILE)
    {
        if (TRUE == file_exists($this->m_aArgs['o'])){
            echo "\n /!\ Log file already exists : ".$this->m_aArgs['o']." ! overwrite (Y/N) ? : " ;
            
            if (strtolower($this->_getInput()) != 'y'){
                echo "\n [ Operation cancel! ], retry with another log file name\n\n"  ;
                exit;
            }
        }
        $this->m_hLogHd = fopen($l_sFileName,'w+' ) ;
        
        $this->log(" Log file : ".date('Y-m-d H:m')."\n") ;
    }
    
    /**
     * Convert log level value into numeric value
     * @param array $p_aArgs Array args
     * @return array Array args in numeric format
     **/
    protected function convertLogLevel($p_aArgs)
    {
        if(TRUE == isset($p_aArgs['l'])){
            if (strtolower($p_aArgs['l']) == 'critical'){
                $p_aArgs['l'] = self::CRITICAL ;
            }
            else if (strtolower($p_aArgs['l']) == 'warning'){
                $p_aArgs['l'] = self::WARNING ;
            }
            else{
                $p_aArgs['l'] = self::NOTICE ;
            }
        }
        else{
            $p_aArgs['l'] = self::NOTICE ;
        }
    
        return $p_aArgs ;
    }
    
    /**
     * @param $p_iLogLevel Numerical log level
     * @return Label 
     **/
    protected function logLabel($p_iLogLevel)
    {
        if($p_iLogLevel == 1){
            return 'CRITICAL' ;
        }
        else if($p_iLogLevel == 2){
            return 'WARNING' ;
        }
        else if($p_iLogLevel == 3){
            return 'NOTICE' ;
        }
    }
    
    /**
     * run kaktus
     **/
    public function run()
    {
        /**
         * f:   valeur requise
         * f::  valeur optionnelle // php 5.3 only
         * f    pas de valeur
         **/
        $shortOpt = 'htl:o:f:d:';
        // $longOpt  = array('help', 'version'); PHP V5.3 only
        
        $this->m_aArgs = getopt( $shortOpt /*, $longOpt*/ ) ;
        $this->m_aArgs = $this->convertLogLevel($this->m_aArgs) ;
        
        // Log file creation
        if (TRUE == isset($this->m_aArgs['o'])){
            $this->createLogFile($this->m_aArgs['o']) ;
        }
        
        $this->log( "\n ********************************************************************" );
        $this->log( "
   __   ___   ________   __   ___  __________   __    __   _________
  |  | /  /  /   __   \ |  | /  / |___    ___| |  |  |  | /   ______|
  |  |/  /   |  |__|  | |  |/  /      |  |     |  |  |  | |  |______
  |      \   |   __   | |      \      |  |     |  |  |  | \______   \
  |  |\   \  |  |  |  | |  |\   \     |  |     |  |__|  |  ______|  |
  |__| \___\ |__|  |__| |__| \___\    |__|      \______/  |_________/
                                                         
                                                         by DiZagn.com
    ", self::CONSOLE) ;
        $this->log( "\n ".self::PROJECTTITLE." version : ".self::VERSION ." (".self::DATE.")");
        $this->log( "\n ".self::PROJECTDESC) ;
        
        // Option -f : audit one file
        if (TRUE == isset($this->m_aArgs['f'])){
            echo $this->auditFile($this->m_aArgs['f']) ;
            echo $this->resume() ;
        }        
        // Option -d : audit one directory
        else if (TRUE == isset($this->m_aArgs['d'])){
            echo $this->auditDir($this->m_aArgs['d']) ;
            echo $this->resume() ;
        }        
        // Display help 
        else{
            echo $this->callHelp() ;
        } 
        
        $this->log( "\n\n *******************************************************************\n\n" ) ;
    }
}

$kaktus = new kaktus() ;
$kaktus->run() ;
